# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@3.2.0

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test-backend:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:lts #using 16.15
      - image: cimg/mysql:8.0
        environment:
          MYSQL_DATABASE: swimlane
          MYSQL_USER: swimlane
          MYSQL_PASSWORD: passw0rd
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm
          app-dir: backend/
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          # wait taken from: https://circleci.com/docs/2.0/postgres-config/#example-mysql-project
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      
      # init sql database
      - run:
          name: init sql database
          command: |
            sudo apt-get update
            sudo apt-get install mysql-client
            mysql -h 127.0.0.1 -u swimlane -ppassw0rd swimlane < backend/config/init.sql
            

      - run:
          name: Run tests
          command: npm test

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build-and-test-backend
      - aws-ecr/build-and-push-image:
          requires: 
            - build-and-test-backend
          repo: "${AWS_RESOURCE_NAME_PREFIX}-backend"
          tag: '${CIRCLE_SHA1}'
          path: ./backend/
      - aws-ecs/deploy-service-update:
          cluster: "${AWS_RESOURCE_NAME_PREFIX}"
          container-image-name-updates: 'container=${AWS_RESOURCE_NAME_PREFIX}-backend,tag=${CIRCLE_SHA1}'
          family: '${AWS_RESOURCE_NAME_PREFIX}-backend'
          requires:
            - aws-ecr/build-and-push-image
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
